//03/05/2023 14:08
import java.util.*;
class ROOTNode {
    String name_col;                                        //nome da coluna do no atual
    Map <String ,Set<Integer>> map ;                        //Mapa (class -> indice's do exemplo)
    double Entropia;                                        //Contem a entropia do no atual 
    //ArrayList <DecisionNode> filhos;                      //filhos (caso existam de um no)

    ArrayList<String[]> Example_Population;                 //Populacao de exemplo 
    ArrayList<String> Original_attributes;                  //atributos ou colunas

    Coluna[] colunas;                                       // contem todas as colunas 

    ROOTNode(String nome_coluna, Map<String,Map<String,String>> variavel_class_indice,Coluna[] colunas){
        //Inicialzamos as estruturas de dados
        map = new HashMap<>();
        //filhos = new ArrayList<>();
        
        //Inicializamos o no
        this.name_col= nome_coluna;
        this.colunas = colunas; 
        //Iniializa map (class ->indice's os exemplos)
        for (String s : variavel_class_indice.keySet())
            Iniatialize(variavel_class_indice.get(s));

        Print_Class_Examples();
        Calculate_Entropia();
    }

    void Print_Class_Examples(){     //Imprime o mapa com (class -> Indice dos exemplos)
        System.out.printf("------------No:%s------------\n",name_col);
        for(String c : map.keySet()){
            System.out.println(c + " | " + map.get(c));
        }
    }

    void Iniatialize(Map<String,String> class_examples){
        for (String key : class_examples.keySet()){
            String[] aux = class_examples.get(key).split(" ");
            for (String indice : aux){
                if (map.get(key) == null){
                    
                    Set <Integer> s = new HashSet<>();
                    s.add(Integer.valueOf(indice));
                    map.put(key,s);
                }
                else {
                    Set<Integer> s = map.get(key);
                    s.add(Integer.valueOf(indice));
                    map.put(key,s);
                }
            }
        }
    }

    double log2(double v){
        return Math.log(v) / Math.log(2);
    }

    //Todo verificar este calculo
    void Calculate_Entropia(){
        int total = 0;       //total de exemplos 
        int nr_classes = map.size();      //numero de classes

        for (String s : map.keySet() )
            total += map.get(s).size();

        System.out.println("Total exemplos : " + total);
        System.out.println("Numero de classes: " + nr_classes); 

        //Calculo da entropia
        String calc = "";
        for (String s : map.keySet()){
            calc += "(-(" + map.get(s).size() + "/" + total + ")log2(" + map.get(s).size() + "/" + total + ")) * ";
            Entropia -= (double)(map.get(s).size() / (double)total) *log2((double)(map.get(s).size() / (double)total));
        }
        calc += "1";
        System.out.println(calc);
        System.out.println("Valor de entropia do no atual = " + Entropia);
    }
}
